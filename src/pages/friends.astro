---
import LayoutDefault from '~/layouts/LayoutDefault.astro';
import FriendCard from '~/components/FriendCard.astro';
import FriendForm from '~/components/FriendForm.astro';

/**
 * 合并本地和在线数据，支持同类合并（按 category 分类）
 * 保证最终 friends 结构与本地 friends.json 格式一致
 */
let friends: Array<{ category: string; items: any[] } > = [];
try {
  const localFriends = (await import('~/data/friends.json')).default;
  let onlineFriends: Array<{ category: string; items: any[] }> = [];
  if (import.meta.env.SSR) {
    // 仅在构建时服务端请求
    const res = await fetch('https://links.njuv.pp.ua/list');
    if (res.ok) {
      const onlineRaw = await res.json();
      // 判断是否为扁平数组（每项有 category，无 items）
      if (Array.isArray(onlineRaw) && onlineRaw.length && !onlineRaw[0].items) {
        // 按 category 分组
        const groupMap = new Map();
        for (const item of onlineRaw) {
          if (!item.category) continue;
          if (!groupMap.has(item.category)) {
            groupMap.set(item.category, { category: item.category, items: [item] });
          } else {
            groupMap.get(item.category).items.push(item);
          }
        }
        onlineFriends = Array.from(groupMap.values());
      } else {
        // 处理已分组但 items 不是数组的情况，或 items 缺失
        onlineFriends = Array.isArray(onlineRaw)
          ? onlineRaw.map(group => ({
              category: group.category,
              items: Array.isArray(group.items) ? group.items : (group.items ? [group.items] : [])
            }))
          : [];
      }
    }
  }
  // 合并本地和在线数据，保证每个 group 的 items 都是数组
  const map = new Map();
  // 检测友链有效性（仅 SSR 阶段，客户端跳过）
  async function checkFriendValid(friend: any) {
    if (!import.meta.env.SSR) return { ...friend, invalid: false };
    try {
      // fetch 不支持 timeout 选项，需用 AbortController
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      const res = await fetch(friend.url, { method: 'HEAD', redirect: 'follow', signal: controller.signal });
      clearTimeout(timeoutId);
      if (!res.ok) return { ...friend, invalid: true };
      return { ...friend, invalid: false };
    } catch {
      return { ...friend, invalid: true };
    }
  }
  // 合并并检测
  async function mergeAndCheck() {
    const map = new Map();
    const invalidItems: any[] = [];
    for (const group of [...localFriends, ...onlineFriends]) {
      if (!group || !group.category) continue;
      const items: any[] = Array.isArray(group.items) ? group.items : (group.items ? [group.items] : []);
      // 检查每个友链有效性
      const checkedItems: any[] = import.meta.env.SSR ? await Promise.all(items.map(checkFriendValid)) : items;
      const valid: any[] = checkedItems.filter((f: any) => !f.invalid);
      const invalid: any[] = checkedItems.filter((f: any) => f.invalid);
      if (!map.has(group.category)) {
        map.set(group.category, { ...group, items: [...valid] });
      } else {
        map.get(group.category).items.push(...valid);
      }
      invalidItems.push(...invalid);
    }
    // 添加失效友链分组
    if (invalidItems.length > 0) {
      map.set('友链失效', { category: '友链失效', items: invalidItems });
    }
    friends = Array.from(map.values());
    // 对每个分组内的 items 进行随机排序
    friends.forEach(group => {
      group.items = group.items.sort(() => Math.random() - 0.5);
    });
  }
  if (import.meta.env.SSR) {
    await mergeAndCheck();
  } else {
    // 客户端 fallback
    for (const group of [...localFriends, ...onlineFriends]) {
      if (!group || !group.category) continue;
      const items = Array.isArray(group.items) ? group.items : (group.items ? [group.items] : []);
      if (!map.has(group.category)) {
        map.set(group.category, { ...group, items: [...items] });
      } else {
        map.get(group.category).items.push(...items);
      }
    }
    friends = Array.from(map.values());
    // 对每个分组内的 items 进行随机排序
    friends.forEach(group => {
      group.items = group.items.sort(() => Math.random() - 0.5);
    });
  }
} catch (e) {
  friends = [];
}
---

<LayoutDefault title="友情链接" description="收录值得推荐的网站与博客">
  <section class="max-w-6xl mx-auto px-4 py-10">
    <h1 class="text-4xl font-bold text-center mb-10">友情链接</h1>

    {friends.map((group) => (
      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">{group.category}</h2>
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {group.items.map((friend) => (
            <div>
              <FriendCard {...{
                name: friend.name ?? friend.title,
                url: friend.url,
                avatar: friend.avatar,
                desc: friend.desc ?? friend.description
              }} />
              {friend.invalid && (
                <span style="color:red;font-size:0.9em;">（失效）</span>
              )}
            </div>
          ))}
        </div>
      </section>
    ))}

    <hr class="my-12" />
    <FriendForm />
  </section>
</LayoutDefault>